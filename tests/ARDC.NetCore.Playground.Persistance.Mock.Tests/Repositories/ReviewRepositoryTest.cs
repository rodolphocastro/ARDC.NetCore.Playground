using ARDC.NetCore.Playground.Domain;
using ARDC.NetCore.Playground.Domain.Models;
using ARDC.NetCore.Playground.Domain.Repositories;
using ARDC.NetCore.Playground.Persistence.Mock.Generators;
using FluentAssertions;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Threading.Tasks;
using Xunit;

namespace ARDC.NetCore.Playground.Persistence.Mock.Tests.Repositories
{
    public class ReviewRepositoryTest : IClassFixture<ServiceProviderFixture>
    {
        private readonly IModelGenerator<Review> _reviewGenerator;
        private readonly IReviewRepository _reviewRepo;

        public ReviewRepositoryTest(ServiceProviderFixture fixture)
        {
            _reviewGenerator = fixture.Provider.GetService<IModelGenerator<Review>>();
            _reviewRepo = fixture.Provider.GetService<IUnitOfWork>().ReviewRepository;
        }

        /// <summary>
        /// It should be possible to create a new Review.
        /// </summary>
        [Fact(DisplayName = "Create a Review")]
        public void CreateReview()
        {
            var newReview = _reviewGenerator.Get();
            newReview.Id = string.Empty;

            newReview = _reviewRepo.Create(newReview);

            newReview.Id.Should().NotBeNullOrWhiteSpace("should be created by the Repository");
        }

        /// <summary>
        /// It should be possible to create a new Review.
        /// </summary>
        [Fact(DisplayName = "Create a Review Async")]
        public async Task CreateReviewAsync()
        {
            var newReview = _reviewGenerator.Get();
            newReview.Id = string.Empty;

            newReview = await _reviewRepo.CreateAsync(newReview);

            newReview.Id.Should().NotBeNullOrWhiteSpace("should be created by the Repository");
        }

        /// <summary>
        /// It should be possible to delete a Review.
        /// </summary>
        [Fact(DisplayName = "Delete a Review")]
        public void DeleteReview()
        {
            var review = _reviewGenerator.Get();

            Action act = () => _reviewRepo.Delete(review);
            act.Should().NotThrow<Exception>("it should do nothing");
        }

        /// <summary>
        /// It should be possible to delete a Review by its id.
        /// </summary>
        [Fact(DisplayName = "Delete a Review by Id")]
        public void DeleteReviewById()
        {
            var review = _reviewGenerator.Get();

            Action act = () => _reviewRepo.Delete(review.Id);
            act.Should().NotThrow<Exception>("it should do nothing");
        }

        /// <summary>
        /// It should be possible to delete a Review.
        /// </summary>
        [Fact(DisplayName = "Delete a Review Async")]
        public void DeleteReviewAsync()
        {
            var review = _reviewGenerator.Get();

            Func<Task> act = async () => await _reviewRepo.DeleteAsync(review);
            act.Should().NotThrow<Exception>("it should do nothing");
        }

        /// <summary>
        /// It should be possible to delete a Review by its id.
        /// </summary>
        [Fact(DisplayName = "Delete a Review by Id Async")]
        public void DeleteReviewByIdAsync()
        {
            var review = _reviewGenerator.Get();

            Func<Task> act = async () => await _reviewRepo.DeleteAsync(review.Id);
            act.Should().NotThrow<Exception>("it should do nothing");
        }

        /// <summary>
        /// It should be possible to get a single Review.
        /// </summary>
        [Fact(DisplayName = "Get a Review")]
        public void GetReview()
        {
            var review = _reviewRepo.Get("reviewId");

            review.Should().NotBeNull("should have been generated by the Repository");
        }

        /// <summary>
        /// It should be possible to get a single Review.
        /// </summary>
        [Fact(DisplayName = "Get a Review Async")]
        public async Task GetReviewAsync()
        {
            var review = await _reviewRepo.GetAsync("reviewId");

            review.Should().NotBeNull("should have been generated by the Repository");
        }

        /// <summary>
        /// It should be possible to get many Reviews.
        /// </summary>
        [Fact(DisplayName = "Get many Reviews")]
        public void GetManyReviews()
        {
            var reviews = _reviewRepo.Get();

            reviews.Should()
                .NotBeNull("it should be created by the Repository").And
                .NotBeEmpty("it should have at least a single element");
        }

        /// <summary>
        /// It should be possible to get many Reviews.
        /// </summary>
        [Fact(DisplayName = "Get many Reviews Async")]
        public async Task GetManyReviewsAsync()
        {
            var reviews = await _reviewRepo.GetAsync();

            reviews.Should()
                .NotBeNull("it should be created by the Repository").And
                .NotBeEmpty("it should have at least a single element");
        }

        /// <summary>
        /// It should be possible to update a Review.
        /// </summary>
        [Fact(DisplayName = "Update a Review")]
        public void UpdateReview()
        {
            var review = _reviewGenerator.Get();
            review.AuthorName = "Pudim!";

            Action act = () => _reviewRepo.Update(review.Id, review);
            act.Should().NotThrow<Exception>("it should do nothing");
        }

        /// <summary>
        /// It should be possible to update a Review.
        /// </summary>
        [Fact(DisplayName = "Update a Review Async")]
        public void UpdateReviewAsync()
        {
            var review = _reviewGenerator.Get();
            review.AuthorName = "Pudim!";

            Func<Task> act = () => _reviewRepo.UpdateAsync(review.Id, review);
            act.Should().NotThrow<Exception>("it should do nothing");
        }
    }
}
